// --- C·∫§U TR√öC D·ªÆ LI·ªÜU & LOCAL STORAGE ---
let phieuNhapList = JSON.parse(localStorage.getItem('phieuNhapList')) || [];
let chiTietPhieuList = JSON.parse(localStorage.getItem('chiTietPhieuList')) || [];
let productPrices = JSON.parse(localStorage.getItem('productPrices')) || {}; 

// H√†m l∆∞u d·ªØ li·ªáu v√†o LocalStorage
function saveData() {
    localStorage.setItem('phieuNhapList', JSON.stringify(phieuNhapList));
    localStorage.setItem('chiTietPhieuList', JSON.stringify(chiTietPhieuList));
    localStorage.setItem('productPrices', JSON.stringify(productPrices));
}

// --- H√ÄM CHUNG: ƒê√ìNG/M·ªû MODAL V√Ä CHUY·ªÇN KHU V·ª∞C HI·ªÇN TH·ªä ---

function backToMenu() {
    // Reset khu v·ª±c hi·ªÉn th·ªã v·ªÅ tr·∫°ng th√°i ban ƒë·∫ßu
    const displayArea = document.getElementById('display-area');
    if (displayArea) {
        displayArea.innerHTML = `<div class="empty-state">Ch·ªçn ch·ª©c nƒÉng ·ªü khung b√™n ph·∫£i ƒë·ªÉ b·∫Øt ƒë·∫ßu.</div>`;
    }
    
    const title = document.getElementById('current-mode-title');
    if (title) title.textContent = 'Khu hi·ªÉn th·ªã';
    
    // Lo·∫°i b·ªè tr·∫°ng th√°i active c·ªßa c√°c n√∫t ch·ª©c nƒÉng
    document.querySelectorAll('.function-btn').forEach(btn => btn.classList.remove('active'));
    
    // X√≥a t·ª´ kh√≥a t√¨m ki·∫øm ƒë√£ l∆∞u
    localStorage.removeItem('currentPhieuSearchKeyword');
    localStorage.removeItem('currentChiTietSearchKeyword');
}

function closeModal(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) {
        modal.style.display = 'none';
        const form = modal.querySelector('form');
        if (form) form.reset();
        
        if (modalId === 'modal-price-edit') {
            modal.remove();
        }
    }
}

function openModal(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) {
        modal.style.display = 'block';
    }
}

// --- H√ÄM T√çNH TO√ÅN V√Ä TI·ªÜN √çCH ---

function updatePhieuNhapTotal(maPhieu) {
    const phieuIndex = phieuNhapList.findIndex(p => p.maPhieu === maPhieu);
    if (phieuIndex === -1) return;

    const total = chiTietPhieuList
        .filter(ct => ct.maPhieuNhap === maPhieu)
        .reduce((sum, ct) => sum + (Number(ct.soLuong) * Number(ct.donGia)), 0); 

    phieuNhapList[phieuIndex].tongTien = total;
}

function generateUniqueCode(prefix) {
    let list;
    if (prefix === 'PN') {
        list = phieuNhapList;
    } else if (prefix === 'CT') {
        list = chiTietPhieuList;
    } else {
        return prefix + Date.now();
    }
    
    let maxNum = 0;
    list.forEach(item => {
        const code = prefix === 'PN' ? item.maPhieu : item.maChiTiet;
        const numPart = parseInt(code.replace(prefix, ''));
        if (!isNaN(numPart) && numPart > maxNum) {
            maxNum = numPart;
        }
    });
    
    const newNum = maxNum + 1;
    return prefix + newNum.toString().padStart(3, '0');
}


// =========================================================
//                   1. CH·ª®C NƒÇNG PHI·∫æU NH·∫¨P H√ÄNG (PN)
// =========================================================

/**
 * H√†m ch·ªâ render ph·∫ßn b·∫£ng d·ªØ li·ªáu (table)
 * ƒê·∫£m b·∫£o thanh t√¨m ki·∫øm kh√¥ng b·ªã reset (m·∫•t focus)
 */
function renderPhieuNhapTable(dataToDisplay) {
    let tableHTML = `<div id="phieu-table-container">`;

    if (dataToDisplay.length === 0) {
        tableHTML += `
            <div class="empty-state">
                ${phieuNhapList.length === 0 ? 'Kh√¥ng c√≥ phi·∫øu nh·∫≠p n√†o.' : 'Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ ph√π h·ª£p.'}
            </div>
        `;
    } else {
        tableHTML += `
            <table class="data-table">
                <thead>
                    <tr style="background-color: #AED6F1; color: #2E86C1;">
                        <th style="text-align: left;">M√£ Phi·∫øu</th>
                        <th style="text-align: left;">Nh√† Cung C·∫•p</th>
                        <th style="text-align: left;">Ng√†y Nh·∫≠p</th>
                        <th style="text-align: right;">T·ªïng Ti·ªÅn</th>
                        <th style="text-align: center;">Thao T√°c</th>
                    </tr>
                </thead>
                <tbody id="phieu-table-body">
        `;

        dataToDisplay.forEach(phieu => { 
            const tongTien = Number(phieu.tongTien) || 0; 
            const tongTienFormatted = tongTien.toLocaleString('vi-VN');
            
            tableHTML += `
                <tr id="phieu-${phieu.maPhieu}">
                    <td style="font-weight: 600;">${phieu.maPhieu}</td>
                    <td>${phieu.nhaCungCap}</td>
                    <td>${phieu.ngayNhap}</td>
                    <td style="text-align: right; font-weight: bold; color: #C0392B;">${tongTienFormatted} ‚Ç´</td>
                    <td style="text-align: center;">
                        <button class="action-btn edit-btn" style="background-color: #FFC107; color: #333; padding: 6px 10px; border-radius: 4px; border: none; cursor: pointer;" onclick="openEditPhieuModal('${phieu.maPhieu}')">S·ª≠a</button>
                        <button class="action-btn delete-btn" style="background-color: #F44336; color: white; padding: 6px 10px; border-radius: 4px; border: none; cursor: pointer; margin-left: 5px;" onclick="deletePhieuNhap('${phieu.maPhieu}')">X√≥a</button>
                    </td>
                </tr>
            `;
        });

        tableHTML += `
                </tbody>
            </table>
        `;
    }

    tableHTML += `</div>`; 
    return tableHTML;
}

/**
 * H√†m hi·ªÉn th·ªã to√†n b·ªô m√†n h√¨nh Phi·∫øu Nh·∫≠p
 * Ch·ªâ t·∫°o thanh ƒëi·ªÅu khi·ªÉn (controls-bar) n·∫øu ch∆∞a t·ªìn t·∫°i
 */
function showPhieuNhap(data) {
    const dataToDisplay = data || phieuNhapList;
    const displayArea = document.getElementById('display-area');
    if (!displayArea) return; 

    // Ki·ªÉm tra xem ƒë√£ v·∫Ω thanh ƒëi·ªÅu khi·ªÉn (controls-bar) ch∆∞a
    const isInitialRender = !document.getElementById('phieu-search-input');
    
    if (isInitialRender || data === undefined) {
        const titleElement = document.getElementById('current-mode-title');
        if (titleElement) titleElement.textContent = 'üìù Qu·∫£n L√Ω Phi·∫øu Nh·∫≠p H√†ng';
        
        document.querySelectorAll('.function-btn').forEach(btn => btn.classList.remove('active'));
        const btnPhieu = document.querySelector('.function-btn.btn-phieu');
        if (btnPhieu) btnPhieu.classList.add('active');

        // L·∫•y t·ª´ kh√≥a ƒë√£ l∆∞u ƒë·ªÉ ƒëi·ªÅn v√†o √¥ input (l·∫ßn ƒë·∫ßu ti√™n)
        const currentKeyword = localStorage.getItem('currentPhieuSearchKeyword') || '';
        
        let contentHTML = `
            <div class="data-management-panel" style="max-width: 1100px; margin: 20px auto; padding: 0;">
                <h3 class="panel-title" style="text-align: center; color: #333;">DANH S√ÅCH PHI·∫æU NH·∫¨P</h3>
                
                <div class="controls-bar"> 
                    <div style="display: flex; gap: 10px; height: 100%;">
                        <button class="action-btn add-btn" style="background-color: #4CAF50; color: white;" onclick="openAddPhieuModal()">‚ûï Th√™m Phi·∫øu</button>
                        <button class="action-btn show-all-btn" style="background-color: #2196F3; color: white;" onclick="showPhieuNhap()">üìã Hi·ªÉn th·ªã t·∫•t c·∫£</button>
                    </div>
                    
                    <div style="display: flex; height: 100%;"> 
                        <input type="text" id="phieu-search-input" placeholder="T√¨m M√£/NCC..." oninput="searchPhieuNhap()" value="${currentKeyword}" class="search-input-fix"> 
                        <button class="action-btn search-btn search-button-fix" onclick="searchPhieuNhap()">üîç T√¨m</button>
                    </div>
                </div>
                <div id="table-display-container"></div> 
            </div>
        `;
        displayArea.innerHTML = contentHTML;
    }
    
    // CH·ªà C·∫¨P NH·∫¨T PH·∫¶N B·∫¢NG D·ªÆ LI·ªÜU
    const tableContainer = document.getElementById('table-display-container');
    if (tableContainer) {
        tableContainer.innerHTML = renderPhieuNhapTable(dataToDisplay);
    }
    
    const searchInput = document.getElementById('phieu-search-input');
    
    if (data === undefined) {
        // Ch·∫ø ƒë·ªô hi·ªÉn th·ªã t·∫•t c·∫£: X√≥a t·ª´ kh√≥a ƒë√£ l∆∞u
        localStorage.removeItem('currentPhieuSearchKeyword');
        if(searchInput) searchInput.value = '';
    } else if (searchInput) {
        // Ch·∫ø ƒë·ªô hi·ªÉn th·ªã k·∫øt qu·∫£ l·ªçc: Gi·ªØ focus ƒë·ªÉ g√µ ti·∫øp
        searchInput.focus();
    }
}

function searchPhieuNhap() {
    const searchInput = document.getElementById('phieu-search-input');
    if (!searchInput) return;
    const keyword = searchInput.value.toLowerCase().trim();
    
    // L∆ØU t·ª´ kh√≥a ngay l·∫≠p t·ª©c
    localStorage.setItem('currentPhieuSearchKeyword', searchInput.value);

    if (keyword === '') {
        localStorage.removeItem('currentPhieuSearchKeyword');
        return showPhieuNhap(); 
    }

    const filteredList = phieuNhapList.filter(phieu => 
        (phieu.maPhieu && phieu.maPhieu.toLowerCase().includes(keyword)) || 
        (phieu.nhaCungCap && phieu.nhaCungCap.toLowerCase().includes(keyword))
    );
    // G·ªåI H√ÄM V·ªöI DANH S√ÅCH ƒê√É L·ªåC (ch·ªâ c·∫≠p nh·∫≠t b·∫£ng)
    showPhieuNhap(filteredList);
}

function openAddPhieuModal() {
    const title = document.getElementById('modal-phieu-title');
    if (title) title.textContent = '‚ûï Th√™m Phi·∫øu Nh·∫≠p';

    const form = document.getElementById('form-phieu');
    if (form) form.onsubmit = handleAddPhieu;

    const maPhieuInput = document.getElementById('ma-phieu');
    if (maPhieuInput) {
        maPhieuInput.value = generateUniqueCode('PN');
        maPhieuInput.disabled = false;
    }

    const tongTienInput = document.getElementById('tong-tien');
    if (tongTienInput) tongTienInput.value = '0';

    const ngayNhapInput = document.getElementById('ngay-nhap');
    if (ngayNhapInput) ngayNhapInput.valueAsDate = new Date(); 

    openModal('modal-phieu');
}

function handleAddPhieu(e) {
    e.preventDefault();
    const maPhieu = document.getElementById('ma-phieu').value.trim();
    const nhaCungCap = document.getElementById('nha-cung-cap').value.trim();
    const ngayNhap = document.getElementById('ngay-nhap').value;
    const tongTien = 0;

    if (phieuNhapList.some(p => p.maPhieu === maPhieu)) {
        return alert(`M√£ phi·∫øu nh·∫≠p ${maPhieu} ƒë√£ t·ªìn t·∫°i!`);
    }

    const newPhieu = { maPhieu, nhaCungCap, ngayNhap, tongTien };
    phieuNhapList.push(newPhieu);
    saveData();
    closeModal('modal-phieu');
    showPhieuNhap();
    alert('Th√™m phi·∫øu nh·∫≠p th√†nh c√¥ng!');
}

function openEditPhieuModal(maPhieu) {
    const phieu = phieuNhapList.find(p => p.maPhieu === maPhieu);
    if (!phieu) return alert('Kh√¥ng t√¨m th·∫•y Phi·∫øu Nh·∫≠p n√†y.');

    const title = document.getElementById('modal-phieu-title');
    if (title) title.textContent = '‚úèÔ∏è S·ª≠a Phi·∫øu Nh·∫≠p';

    const form = document.getElementById('form-phieu');
    if (form) form.onsubmit = (e) => handleEditPhieu(e, maPhieu);

    const maPhieuInput = document.getElementById('ma-phieu');
    if (maPhieuInput) {
        maPhieuInput.value = phieu.maPhieu;
        maPhieuInput.disabled = true;
    }
    
    const nhaCungCapInput = document.getElementById('nha-cung-cap');
    if (nhaCungCapInput) nhaCungCapInput.value = phieu.nhaCungCap;
    
    const ngayNhapInput = document.getElementById('ngay-nhap');
    if (ngayNhapInput) ngayNhapInput.value = phieu.ngayNhap;
    
    const tongTienInput = document.getElementById('tong-tien');
    if (tongTienInput) tongTienInput.value = (phieu.tongTien || 0).toLocaleString('vi-VN');
    
    openModal('modal-phieu');
}

function handleEditPhieu(e, maPhieu) {
    e.preventDefault();
    const index = phieuNhapList.findIndex(p => p.maPhieu === maPhieu);
    if (index === -1) return alert('L·ªói: Kh√¥ng t√¨m th·∫•y phi·∫øu ƒë·ªÉ s·ª≠a.');

    const nhaCungCapInput = document.getElementById('nha-cung-cap');
    if (nhaCungCapInput) phieuNhapList[index].nhaCungCap = nhaCungCapInput.value.trim();
    
    const ngayNhapInput = document.getElementById('ngay-nhap');
    if (ngayNhapInput) phieuNhapList[index].ngayNhap = ngayNhapInput.value;
    
    saveData();
    closeModal('modal-phieu');
    showPhieuNhap();
    alert('S·ª≠a phi·∫øu nh·∫≠p th√†nh c√¥ng!');
}

function deletePhieuNhap(maPhieu) {
    if (!confirm(`B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a Phi·∫øu Nh·∫≠p h√†ng c√≥ M√£: ${maPhieu} kh√¥ng? Vi·ªác n√†y c≈©ng s·∫Ω X√ìA T·∫§T C·∫¢ Chi Ti·∫øt Phi·∫øu li√™n quan!`)) {
        return;
    }

    phieuNhapList = phieuNhapList.filter(p => p.maPhieu !== maPhieu);
    chiTietPhieuList = chiTietPhieuList.filter(ct => ct.maPhieuNhap !== maPhieu);

    saveData();
    showPhieuNhap();
    alert(`ƒê√£ x√≥a Phi·∫øu Nh·∫≠p ${maPhieu} v√† t·∫•t c·∫£ Chi Ti·∫øt Phi·∫øu li√™n quan.`);
}


// =========================================================
//              2. CH·ª®C NƒÇNG CHI TI·∫æT PHI·∫æU NH·∫¨P H√ÄNG (CT)
// =========================================================

/**
 * H√†m ch·ªâ render ph·∫ßn b·∫£ng Chi Ti·∫øt (table)
 * ƒê·∫£m b·∫£o thanh t√¨m ki·∫øm kh√¥ng b·ªã reset (m·∫•t focus)
 */
function renderChiTietTable(dataToDisplay) {
    let tableHTML = `<div id="chitiet-table-container">`;

    if (dataToDisplay.length === 0) {
        tableHTML += `<div class="empty-state">
                ${chiTietPhieuList.length === 0 ? 'Kh√¥ng c√≥ chi ti·∫øt phi·∫øu nh·∫≠p n√†o.' : 'Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ ph√π h·ª£p.'}
            </div>`;
    } else {
        tableHTML += `
            <table class="data-table">
                <thead>
                    <tr style="background-color: #F9E79F; color: #D68910;">
                        <th style="text-align: left;">M√£ Phi·∫øu Nh·∫≠p</th>
                        <th style="text-align: left;">M√£ Chi Ti·∫øt (ID)</th>
                        <th style="text-align: left;">M√£ SP</th>
                        <th style="text-align: left;">T√™n SP</th>
                        <th style="text-align: right;">S·ªë L∆∞·ª£ng</th>
                        <th style="text-align: right;">ƒê∆°n Gi√°</th>
                        <th style="text-align: right;">Th√†nh Ti·ªÅn</th>
                        <th style="text-align: center;">Thao T√°c</th>
                    </tr>
                </thead>
                <tbody id="chitiet-table-body">
        `;
        dataToDisplay.forEach(ct => {
            const soLuong = Number(ct.soLuong) || 0;
            const donGia = Number(ct.donGia) || 0;
            const thanhTien = soLuong * donGia;
            tableHTML += `
                <tr id="chitiet-${ct.maChiTiet}">
                    <td style="color: #1E88E5; font-weight: 600;">${ct.maPhieuNhap}</td>
                    <td>${ct.maChiTiet}</td>
                    <td>${ct.maSP}</td>
                    <td>${ct.tenSP}</td>
                    <td style="text-align: right;">${soLuong.toLocaleString('vi-VN')}</td>
                    <td style="text-align: right;">${donGia.toLocaleString('vi-VN')} ‚Ç´</td>
                    <td style="text-align: right; font-weight: bold; color: #27AE60;">${thanhTien.toLocaleString('vi-VN')} ‚Ç´</td>
                    <td style="text-align: center;">
                        <button class="action-btn edit-btn" style="background-color: #FFC107; color: #333; padding: 6px 10px; border-radius: 4px; border: none; cursor: pointer;" onclick="openEditChiTietModal('${ct.maChiTiet}')">S·ª≠a</button>
                        <button class="action-btn delete-btn" style="background-color: #F44336; color: white; padding: 6px 10px; border-radius: 4px; border: none; cursor: pointer; margin-left: 5px;" onclick="deleteChiTietPhieu('${ct.maChiTiet}')">X√≥a</button>
                    </td>
                </tr>
            `;
        });
        tableHTML += `
                </tbody>
            </table>
        `;
    }
    tableHTML += `</div>`; 
    return tableHTML;
}


function showChiTietPhieu(data) {
    const dataToDisplay = data || chiTietPhieuList;
    const displayArea = document.getElementById('display-area');
    if (!displayArea) return; 

    // Ki·ªÉm tra xem ƒë√£ v·∫Ω thanh ƒëi·ªÅu khi·ªÉn (controls-bar) ch∆∞a
    const isInitialRender = !document.getElementById('chitiet-search-input');

    if (isInitialRender || data === undefined) {
        const titleElement = document.getElementById('current-mode-title');
        if (titleElement) titleElement.textContent = 'üìö Qu·∫£n L√Ω Chi Ti·∫øt Phi·∫øu Nh·∫≠p';
        
        document.querySelectorAll('.function-btn').forEach(btn => btn.classList.remove('active'));
        const btnChiTiet = document.querySelector('.function-btn.btn-chitiet');
        if (btnChiTiet) btnChiTiet.classList.add('active');

        const currentKeyword = localStorage.getItem('currentChiTietSearchKeyword') || '';

        let contentHTML = `
            <div class="data-management-panel" style="max-width: 1100px; margin: 20px auto; padding: 0;">
                <h3 class="panel-title" style="text-align: center; color: #333;">DANH S√ÅCH CHI TI·∫æT PHI·∫æU NH·∫¨P</h3>
                
                <div class="controls-bar">
                    <div style="display: flex; gap: 10px; height: 100%;">
                        <button class="action-btn add-btn" style="background-color: #4CAF50; color: white;" onclick="openAddChiTietModal()">‚ûï Th√™m Chi Ti·∫øt</button>
                        <button class="action-btn show-all-btn" style="background-color: #2196F3; color: white;" onclick="showChiTietPhieu()">üìã Hi·ªÉn th·ªã t·∫•t c·∫£</button>
                    </div>
                    
                    <div style="display: flex; height: 100%;">
                        <input type="text" id="chitiet-search-input" placeholder="T√¨m M√£ CT/T√™n SP..." oninput="searchChiTietPhieu()" value="${currentKeyword}" class="search-input-fix">
                        <button class="action-btn search-btn search-button-fix" onclick="searchChiTietPhieu()">üîç T√¨m</button>
                    </div>
                </div>
                <div id="table-display-container-ct"></div> 
            </div>
        `;
        displayArea.innerHTML = contentHTML;
    }

    // CH·ªà C·∫¨P NH·∫¨T PH·∫¶N B·∫¢NG D·ªÆ LI·ªÜU
    const tableContainer = document.getElementById('table-display-container-ct');
    if (tableContainer) {
        tableContainer.innerHTML = renderChiTietTable(dataToDisplay);
    }
    
    const searchInput = document.getElementById('chitiet-search-input');
    
    if (data === undefined) {
        // Ch·∫ø ƒë·ªô hi·ªÉn th·ªã t·∫•t c·∫£: X√≥a t·ª´ kh√≥a ƒë√£ l∆∞u
        localStorage.removeItem('currentChiTietSearchKeyword');
        if(searchInput) searchInput.value = '';
    } else if (searchInput) {
        // Ch·∫ø ƒë·ªô hi·ªÉn th·ªã k·∫øt qu·∫£ l·ªçc: Gi·ªØ focus ƒë·ªÉ g√µ ti·∫øp
        searchInput.focus();
    }
}

function searchChiTietPhieu() {
    const searchInput = document.getElementById('chitiet-search-input');
    if (!searchInput) return;
    const keyword = searchInput.value.toLowerCase().trim();
    
    // L∆∞u t·ª´ kh√≥a
    localStorage.setItem('currentChiTietSearchKeyword', searchInput.value);

    if (keyword === '') {
        localStorage.removeItem('currentChiTietSearchKeyword');
        return showChiTietPhieu();
    }

    const filteredList = chiTietPhieuList.filter(ct => 
        (ct.maChiTiet && ct.maChiTiet.toLowerCase().includes(keyword)) || 
        (ct.tenSP && ct.tenSP.toLowerCase().includes(keyword))
    );
    showChiTietPhieu(filteredList);
}

function openAddChiTietModal() {
    const title = document.getElementById('modal-chitiet-title');
    if (title) title.textContent = '‚ûï Th√™m Chi Ti·∫øt Phi·∫øu';
    
    const form = document.getElementById('form-chitiet');
    if (form) form.onsubmit = handleAddChiTiet;
    
    const maPhieuInput = document.getElementById('ct-ma-phieu');
    if (maPhieuInput) {
        maPhieuInput.value = ''; 
        maPhieuInput.disabled = false;
    }

    const maSPInput = document.getElementById('ct-ma-sp');
    if (maSPInput) maSPInput.value = '';
    
    const tenSPInput = document.getElementById('ct-ten-sp');
    if (tenSPInput) tenSPInput.value = '';
    
    const soLuongInput = document.getElementById('ct-so-luong');
    if (soLuongInput) soLuongInput.value = '';
    
    const donGiaInput = document.getElementById('ct-don-gia');
    if (donGiaInput) donGiaInput.value = '';
    
    openModal('modal-chitiet');
}

function handleAddChiTiet(e) {
    e.preventDefault();
    const maPhieuNhap = document.getElementById('ct-ma-phieu').value.trim().toUpperCase();
    const maSP = document.getElementById('ct-ma-sp').value.trim().toUpperCase();
    const tenSP = document.getElementById('ct-ten-sp').value.trim();
    const soLuong = Number(document.getElementById('ct-so-luong').value);
    const donGia = Number(document.getElementById('ct-don-gia').value);

    const phieu = phieuNhapList.find(p => p.maPhieu === maPhieuNhap);
    if (!phieu) {
        return alert(`L·ªói: Kh√¥ng t√¨m th·∫•y Phi·∫øu Nh·∫≠p c√≥ M√£: ${maPhieuNhap}. Vui l√≤ng ki·ªÉm tra l·∫°i.`);
    }
    if (isNaN(soLuong) || isNaN(donGia) || soLuong <= 0 || donGia <= 0) {
         return alert('L·ªói: S·ªë l∆∞·ª£ng v√† ƒê∆°n gi√° ph·∫£i l√† s·ªë d∆∞∆°ng.');
    }

    const maChiTiet = generateUniqueCode('CT');

    const newChiTiet = { maChiTiet, maPhieuNhap, maSP, tenSP, soLuong, donGia };
    chiTietPhieuList.push(newChiTiet);

    updatePhieuNhapTotal(maPhieuNhap);
    
    saveData();
    closeModal('modal-chitiet');
    showChiTietPhieu();
    alert('Th√™m chi ti·∫øt phi·∫øu th√†nh c√¥ng!');
}

function openEditChiTietModal(maChiTiet) {
    const chiTiet = chiTietPhieuList.find(ct => ct.maChiTiet === maChiTiet);
    if (!chiTiet) return alert('Kh√¥ng t√¨m th·∫•y Chi Ti·∫øt Phi·∫øu n√†y.');

    const title = document.getElementById('modal-chitiet-title');
    if (title) title.textContent = '‚úèÔ∏è S·ª≠a Chi Ti·∫øt Phi·∫øu';
    
    const form = document.getElementById('form-chitiet');
    if (form) form.onsubmit = (e) => handleEditChiTiet(e, maChiTiet, chiTiet.maPhieuNhap);

    const maPhieuInput = document.getElementById('ct-ma-phieu');
    if (maPhieuInput) {
        maPhieuInput.value = chiTiet.maPhieuNhap;
        maPhieuInput.disabled = true;
    }
    
    const maSPInput = document.getElementById('ct-ma-sp');
    if (maSPInput) maSPInput.value = chiTiet.maSP;
    
    const tenSPInput = document.getElementById('ct-ten-sp');
    if (tenSPInput) tenSPInput.value = chiTiet.tenSP;
    
    const soLuongInput = document.getElementById('ct-so-luong');
    if (soLuongInput) soLuongInput.value = chiTiet.soLuong;
    
    const donGiaInput = document.getElementById('ct-don-gia');
    if (donGiaInput) donGiaInput.value = chiTiet.donGia;
    
    openModal('modal-chitiet');
}

function handleEditChiTiet(e, maChiTiet, oldMaPhieu) {
    e.preventDefault();
    const index = chiTietPhieuList.findIndex(ct => ct.maChiTiet === maChiTiet);
    if (index === -1) return alert('L·ªói: Kh√¥ng t√¨m th·∫•y chi ti·∫øt phi·∫øu ƒë·ªÉ s·ª≠a.');

    const maSP = document.getElementById('ct-ma-sp').value.trim().toUpperCase();
    const soLuong = Number(document.getElementById('ct-so-luong').value);
    const donGia = Number(document.getElementById('ct-don-gia').value);

    if (isNaN(soLuong) || isNaN(donGia) || soLuong <= 0 || donGia <= 0) {
         return alert('L·ªói: S·ªë l∆∞·ª£ng v√† ƒê∆°n gi√° ph·∫£i l√† s·ªë d∆∞∆°ng.');
    }

    chiTietPhieuList[index].maSP = maSP;
    chiTietPhieuList[index].tenSP = document.getElementById('ct-ten-sp').value.trim();
    chiTietPhieuList[index].soLuong = soLuong;
    chiTietPhieuList[index].donGia = donGia;

    updatePhieuNhapTotal(oldMaPhieu);
    
    saveData();
    closeModal('modal-chitiet');
    showChiTietPhieu();
    alert('S·ª≠a chi ti·∫øt phi·∫øu th√†nh c√¥ng!');
}

function deleteChiTietPhieu(maChiTiet) {
    const index = chiTietPhieuList.findIndex(ct => ct.maChiTiet === maChiTiet);
    if (index === -1) return;

    const maPhieuNhap = chiTietPhieuList[index].maPhieuNhap;

    if (!confirm(`B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a Chi Ti·∫øt Phi·∫øu c√≥ ID: ${maChiTiet} kh√¥ng?`)) {
        return;
    }

    chiTietPhieuList.splice(index, 1);

    updatePhieuNhapTotal(maPhieuNhap);
    
    saveData();
    showChiTietPhieu();
    alert(`ƒê√£ x√≥a Chi Ti·∫øt Phi·∫øu ${maChiTiet}.`);
}


// =========================================================
//              3. CH·ª®C NƒÇNG L·ª¢I NHU·∫¨N & GI√Å B√ÅN (LN)
// =========================================================

function getLatestImportPrice(maSP) {
    for (let i = chiTietPhieuList.length - 1; i >= 0; i--) {
        if (chiTietPhieuList[i].maSP === maSP) {
            return {
                tenSP: chiTietPhieuList[i].tenSP,
                donGiaNhap: Number(chiTietPhieuList[i].donGia) 
            };
        }
    }
    return null;
}

function showLoiNhuan() {
    const displayArea = document.getElementById('display-area');
    if (!displayArea) return; 
    
    const titleElement = document.getElementById('current-mode-title');
    if (titleElement) titleElement.textContent = 'üí∞ Qu·∫£n L√Ω L·ª£i Nhu·∫≠n & Gi√° B√°n';
    
    document.querySelectorAll('.function-btn').forEach(btn => btn.classList.remove('active'));
    const btnLoiNhuan = document.querySelector('.function-btn.btn-loinhuan');
    if (btnLoiNhuan) btnLoiNhuan.classList.add('active');

    productPrices = JSON.parse(localStorage.getItem('productPrices')) || {}; 
    
    const latestImportPrices = {};
    const uniqueProducts = new Set();
    
    // Duy·ªát ng∆∞·ª£c t·ª´ cu·ªëi ƒë·ªÉ ƒë·∫£m b·∫£o l·∫•y gi√° nh·∫≠p g·∫ßn nh·∫•t
    [...chiTietPhieuList].reverse().forEach(ct => {
        if (!latestImportPrices[ct.maSP]) {
            latestImportPrices[ct.maSP] = {
                tenSP: ct.tenSP,
                donGiaNhap: Number(ct.donGia) || 0,
            };
        }
        uniqueProducts.add(ct.maSP);
    });
    
    let contentHTML = `
        <div class="data-management-panel" style="max-width: 900px; margin: 20px auto; padding: 0;">
            <h3 class="panel-title" style="text-align: center; color: #333;">T√çNH TO√ÅN L·ª¢I NHU·∫¨N V√Ä ƒê·ªäNH GI√Å B√ÅN</h3>
            <p style="text-align: center; color: #666; margin-bottom: 20px;">
                D·ªØ li·ªáu ƒë∆∞·ª£c t√≠nh to√°n d·ª±a tr√™n **Gi√° Nh·∫≠p G·∫ßn Nh·∫•t** c·ªßa m·ªói s·∫£n ph·∫©m.
            </p>
    `;

    let tableHTML = `<div id="loinhuan-table-container">`;

    if (uniqueProducts.size === 0) {
        tableHTML += `
            <div class="empty-state">
                Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o ƒë∆∞·ª£c nh·∫≠p ƒë·ªÉ t√≠nh L·ª£i Nhu·∫≠n.
            </div>
        `;
    } else {
        tableHTML += `
            <table class="data-table">
                <thead>
                    <tr style="background-color: #A9DFBF; color: #27AE60;">
                        <th style="text-align: left;">M√£ SP</th>
                        <th style="text-align: left;">T√™n SP</th>
                        <th style="text-align: right;">Gi√° Nh·∫≠p G·∫ßn Nh·∫•t</th>
                        <th style="text-align: right;">Gi√° B√°n ƒê·ªãnh Nghƒ©a</th>
                        <th style="text-align: center;">L·ª£i Nhu·∫≠n (%)</th>
                        <th style="text-align: center;">Thao T√°c</th>
                    </tr>
                </thead>
                <tbody id="loinhuan-table-body">
        `;

        uniqueProducts.forEach(maSP => {
            const latestPrice = latestImportPrices[maSP];
            if (!latestPrice) return; 
            
            const donGiaNhap = latestPrice.donGiaNhap;
            const defaultGiaBan = Math.ceil((donGiaNhap || 0) * 1.2 / 1000) * 1000;
            const currentGiaBan = Number(productPrices[maSP]?.giaBan) || defaultGiaBan;
            
            let LN_percent = 0;
            if (donGiaNhap > 0) {
                 LN_percent = (currentGiaBan - donGiaNhap) / donGiaNhap * 100;
            }

            tableHTML += `
                <tr id="price-${maSP}">
                    <td style="font-weight: 600;">${maSP}</td>
                    <td>${latestPrice.tenSP}</td>
                    <td style="text-align: right;">${donGiaNhap.toLocaleString('vi-VN')} ‚Ç´</td>
                    <td style="text-align: right; font-weight: bold; color: #E67E22;">${currentGiaBan.toLocaleString('vi-VN')} ‚Ç´</td>
                    <td style="text-align: center; font-weight: bold; color: ${LN_percent >= 5 ? '#27AE60' : '#E74C3C'};">
                        ${LN_percent.toFixed(2)} %
                    </td>
                    <td style="text-align: center;">
                        <button class="action-btn edit-btn" style="background-color: #3498DB; color: white; padding: 6px 10px; border-radius: 4px; border: none; cursor: pointer;" onclick="openEditPriceModal('${maSP}')">S·ª≠a Gi√° B√°n</button>
                    </td>
                </tr>
            `;
        });

        tableHTML += `
                </tbody>
            </table>
        `;
    }

    tableHTML += `</div>`; 
    
    displayArea.innerHTML = contentHTML + tableHTML + `</div>`; 
}

function openEditPriceModal(maSP) {
    productPrices = JSON.parse(localStorage.getItem('productPrices')) || {};
    
    const latestImportPrices = getLatestImportPrice(maSP);
    if (!latestImportPrices) return alert('Kh√¥ng t√¨m th·∫•y gi√° nh·∫≠p g·∫ßn nh·∫•t cho s·∫£n ph·∫©m n√†y.');
    
    const donGiaNhap = latestImportPrices.donGiaNhap;
    const defaultGiaBan = Math.ceil((donGiaNhap || 0) * 1.2 / 1000) * 1000;
    const currentGiaBan = Number(productPrices[maSP]?.giaBan) || defaultGiaBan; 
    
    closeModal('modal-price-edit'); 
    
    const modalDiv = document.createElement('div');
    modalDiv.id = 'modal-price-edit';
    modalDiv.className = 'modal';
    modalDiv.style.display = 'block'; 
    
    modalDiv.innerHTML = `
        <div class="modal-content" style="max-width: 400px;">
            <div class="modal-header">
                <h3 style="margin: 0;">‚úèÔ∏è S·ª≠a Gi√° B√°n cho ${latestImportPrices.tenSP} (${maSP})</h3>
                <button class="close-btn" onclick="closeModal('modal-price-edit')">&times;</button>
            </div>
            <form id="form-price-edit" onsubmit="handleEditPrice(event, '${maSP}', ${donGiaNhap})">
                <div class="form-group">
                    <label style="display: block; margin-bottom: 5px; font-weight: bold;">Gi√° Nh·∫≠p G·∫ßn Nh·∫•t:</label>
                    <input type="text" value="${donGiaNhap.toLocaleString('vi-VN')} ‚Ç´" disabled style="background-color: #f7f7f7;">
                </div>
                <div class="form-group">
                    <label for="new-gia-ban" style="display: block; margin-bottom: 5px; font-weight: bold;">Gi√° B√°n M·ªõi (Ph·∫£i l·ªõn h∆°n Gi√° Nh·∫≠p):</label>
                    <input type="number" id="new-gia-ban" value="${currentGiaBan}" required min="${donGiaNhap}">
                </div>
                <p style="margin-top: 10px; font-weight: bold;">L·ª£i Nhu·∫≠n D·ª± Ki·∫øn: <span id="ln-du-kien" style="color: blue;">...</span></p>
                <div class="form-actions">
                    <button type="submit" class="btn-save">üíæ L∆∞u</button>
                    <button type="button" class="btn-cancel" onclick="closeModal('modal-price-edit')">‚ùå H·ªßy</button>
                </div>
            </form>
        </div>
    `;
    
    document.body.appendChild(modalDiv);
    
    const inputGiaBan = document.getElementById('new-gia-ban');
    const lnSpan = document.getElementById('ln-du-kien');
    const updateLNDuKien = () => {
        const newGiaBan = parseFloat(inputGiaBan.value);
        if (isNaN(newGiaBan) || newGiaBan < donGiaNhap) {
            lnSpan.textContent = 'Gi√° b√°n ph·∫£i ‚â• Gi√° nh·∫≠p.';
            lnSpan.style.color = 'red';
            return;
        }
        let lnPercent = 0;
        if (donGiaNhap > 0) {
             lnPercent = (newGiaBan - donGiaNhap) / donGiaNhap * 100;
        }
        
        lnSpan.textContent = `${lnPercent.toFixed(2)} %`;
        lnSpan.style.color = lnPercent >= 5 ? 'green' : 'blue';
    };
    
    updateLNDuKien();
    inputGiaBan.addEventListener('input', updateLNDuKien);
}

function handleEditPrice(e, maSP, donGiaNhap) {
    e.preventDefault();
    const newGiaBanInput = document.getElementById('new-gia-ban');
    if (!newGiaBanInput) return;

    const newGiaBan = parseFloat(newGiaBanInput.value);
    
    if (newGiaBan < donGiaNhap) {
        return alert('Gi√° B√°n ph·∫£i l·ªõn h∆°n ho·∫∑c b·∫±ng Gi√° Nh·∫≠p!');
    }
    
    let lnPercent = 0;
    if (donGiaNhap > 0) {
        lnPercent = (newGiaBan - donGiaNhap) / donGiaNhap * 100;
    }

    productPrices[maSP] = {
        giaBan: newGiaBan,
        phanTramLN: lnPercent
    };
    
    localStorage.setItem('productPrices', JSON.stringify(productPrices));
    closeModal('modal-price-edit');
    showLoiNhuan();
    alert(`ƒê√£ c·∫≠p nh·∫≠t Gi√° B√°n cho s·∫£n ph·∫©m ${maSP}!`);
}


// --- KH·ªûI T·∫†O V√Ä G·∫ÆN S·ª∞ KI·ªÜN ---
document.addEventListener('DOMContentLoaded', () => {
    const btnPhieu = document.querySelector('.function-btn.btn-phieu');
    const btnChiTiet = document.querySelector('.function-btn.btn-chitiet');
    const btnLoiNhuan = document.querySelector('.function-btn.btn-loinhuan');
    const backBtn = document.querySelector('.back-btn');

    if (btnPhieu) btnPhieu.onclick = showPhieuNhap;
    if (btnChiTiet) btnChiTiet.onclick = showChiTietPhieu;
    if (btnLoiNhuan) btnLoiNhuan.onclick = showLoiNhuan;
    if (backBtn) backBtn.onclick = backToMenu;
    
    backToMenu();
});